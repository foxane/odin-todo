"use strict";(self.webpackChunkodin_todo=self.webpackChunkodin_todo||[]).push([[792],{944:(t,e,n)=>{n.d(e,{A:()=>s});var r=n(354),o=n.n(r),a=n(314),i=n.n(a)()(o());i.push([t.id,"@import url(https://fonts.googleapis.com/css2?family=Poppins:ital,wght@0,100;0,200;0,300;0,400;0,500;0,600;0,700;0,800;0,900;1,100;1,200;1,300;1,400;1,500;1,600;1,700;1,800;1,900&display=swap);"]),i.push([t.id,":root {\n  --clr-body-bg: #ffffff;\n  --clr-header-bg: #189ff8;\n  --clr-nav-bg: #189ff8;\n  --clr-main-bg: #ffffff;\n\n  --clr-nav-btn: #07578b;\n  --clr-accent: #00ccff;\n  --clr-complete-grad: #189ff8;\n  --clr-input-bg: #70e2ff;\n\n  --clr-prio-low: rgb(0, 255, 0);\n  --clr-prio-medium: rgb(255, 255, 0);\n  --clr-prio-high: rgb(255, 0, 0);\n\n  --clr-complete-low: rgb(179, 255, 179);\n  --clr-complete-medium: rgb(253, 253, 195);\n  --clr-complete-high: #ffbaba;\n}\n\n/* GLOBAL */\n* {\n  padding: 0;\n  margin: 0;\n  box-sizing: border-box;\n}\nbody {\n  display: grid;\n  grid-template-rows: 5rem 1fr;\n  grid-template-columns: minmax(10rem, 1fr) 4fr;\n  min-height: 100vh;\n  width: 100%;\n  gap: 10px;\n  background-color: var(--clr-body-bg);\n\n  font-family: Poppins, Arial, Helvetica, sans-serif;\n  font-size: 1.1rem;\n}\n\n/* HEADER */\nheader {\n  grid-row: 1/2;\n  grid-column: 2/3;\n\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  padding: 0 2rem;\n\n  background-color: var(--clr-header-bg);\n  box-shadow: -5px 5px 10px -5px rgb(0, 0, 0);\n}\nheader h1 {\n  vertical-align: middle;\n}\nheader .category {\n  display: flex;\n  justify-content: space-evenly;\n  align-items: center;\n  gap: 1.3rem;\n}\n.category-btn {\n  padding: 5px 10px;\n  border-radius: 5px;\n  transition: background 0.25s;\n  font-weight: 600;\n  border: 2px solid transparent;\n}\n/* HEADER.HOVER */\n.category-btn:hover {\n  background-color: var(--clr-accent);\n}\n/* Actice state */\n.category-btn.active {\n  background-color: var(--clr-accent);\n  border: 2px solid white;\n  font-style: italic;\n}\n\naside {\n  grid-row: 1/4;\n  grid-column: 1/2;\n\n  display: flex;\n  flex-flow: column nowrap;\n  align-items: flex-end;\n  gap: 2rem;\n\n  padding: 5rem 2rem 0 0;\n\n  background-color: var(--clr-nav-bg);\n}\naside .project-content {\n  display: flex;\n  flex-flow: column;\n  gap: 1rem;\n}\n.project-btn {\n  display: flex;\n  justify-content: flex-end;\n\n  border: 2px solid;\n  background-color: var(--clr-nav-btn);\n  color: white;\n  padding: 1rem;\n  border-radius: 5px;\n  transition: color 0.25s, background 0.25s;\n}\n.project-btn i {\n  margin-left: 2rem;\n  font-size: 1.2rem;\n}\n.project-btn i:hover {\n  color: black;\n  cursor: pointer;\n}\n\n.project-btn.new-project-btn {\n  border: 2px dashed;\n  opacity: 1;\n}\n.project-btn:hover {\n  background-color: var(--clr-accent);\n  color: rgb(250, 234, 11);\n}\n.all-project-btn {\n  display: block;\n  text-align: center;\n  font-weight: 600;\n}\n.project-btn.active {\n  background-color: var(--clr-accent);\n  color: rgb(250, 234, 11);\n}\n\nmain {\n  grid-row: 2/3;\n  grid-column: 2/3;\n\n  padding: 2rem;\n  background-color: var(--clr-main-bg);\n  box-shadow: -5px 5px 10px -5px rgb(0, 0, 0);\n  border-radius: 5px;\n}\n.task-container__header {\n  display: flex;\n  justify-content: space-evenly;\n  align-items: center;\n  margin-right: 5rem;\n}\n.task-container__header select {\n  font-size: inherit;\n  font-family: inherit;\n}\n.task-content {\n  margin-top: 2rem;\n\n  display: grid;\n  grid-template-columns: repeat(auto-fill, minmax(400px, 1fr));\n  grid-template-rows: repeat(auto-fill, minmax(200px, 1fr));\n  grid-auto-rows: 200px;\n  gap: 10px;\n}\n.task-card {\n  border: 2px solid rgb(170, 166, 166);\n  border-radius: 2px 5px 5px 2px;\n  background-color: var(--clr-main-bg);\n  padding: 1rem 3rem 1rem 1rem;\n  border-left: 10px solid;\n  box-shadow: -5px 5px 5px 0px rgb(216, 214, 214);\n\n  display: flex;\n  flex-flow: column nowrap;\n  justify-content: space-around;\n\n  position: relative;\n}\n.task-card:hover {\n  box-shadow: -5px 5px 5px 0px rgb(146, 146, 146);\n}\n.task-card__control {\n  position: absolute;\n  display: flex;\n  flex-flow: column nowrap;\n  justify-content: space-evenly;\n  border: none;\n  background-color: transparent;\n  height: 100%;\n  right: 10px;\n}\n.task-card__control button {\n  font-size: 1.5rem;\n  width: 2.5rem;\n  height: 2.5rem;\n  padding: 5px;\n  cursor: pointer;\n  background-color: transparent;\n  border: none;\n  border-radius: 50%;\n\n  transition: color 0.25s, background 0.25s;\n}\n.task-card__control button:hover {\n  color: white;\n  background-color: black;\n}\n.new-task-btn {\n  position: absolute;\n  right: 2rem;\n\n  display: flex;\n  flex-flow: row;\n  align-items: center;\n  justify-content: center;\n  gap: 10px;\n\n  padding: 5px;\n\n  border: 5px dotted;\n  font-size: 1rem;\n  opacity: 0.7;\n  transition: opacity 0.5s, border 1s;\n}\n.new-task-btn i {\n  font-size: 2rem;\n}\n.new-task-btn:hover {\n  border: 5px solid;\n  opacity: 1;\n}\n\nfooter {\n  margin: auto 0 1rem 0;\n}\nfooter a:any-link {\n  color: black;\n  text-decoration: none;\n  font-style: italic;\n  transition: color 0.25s;\n}\nfooter a:hover {\n  color: white;\n}\n\n/* Priority */\n.low {\n  border-left: 10px solid var(--clr-prio-low);\n}\n.medium {\n  border-left: 10px solid var(--clr-prio-medium);\n}\n.high {\n  border-left: 10px solid var(--clr-prio-high);\n}\n.complete {\n  background-position: left;\n  background-size: 0 100%;\n  background-repeat: no-repeat;\n  animation: complete-animation 1s forwards;\n  opacity: 0.5;\n  transition: opacity 1s;\n}\n.completed-before {\n  animation: complete-animation 0s forwards;\n  transition: none;\n}\n.low.complete {\n  background-image: linear-gradient(\n    90deg,\n    var(--clr-complete-low),\n    var(--clr-complete-low)\n  );\n}\n.medium.complete {\n  background-image: linear-gradient(\n    90deg,\n    var(--clr-complete-medium),\n    var(--clr-complete-medium)\n  );\n}\n.high.complete {\n  background-image: linear-gradient(\n    90deg,\n    var(--clr-complete-high),\n    var(--clr-complete-high)\n  );\n}\n\n/* Completion anumation */\n@keyframes complete-animation {\n  100% {\n    background-size: 100% 100%;\n  }\n}\n\n/* Dialog */\ndialog {\n  margin: auto;\n  height: fit-content;\n  width: fit-content;\n\n  border: 5px solid black;\n  border-radius: 5px;\n  box-shadow: -5px 5px 20px 0px rgb(56, 54, 54);\n}\nform {\n  height: 450px;\n  width: 500px;\n\n  display: flex;\n  flex-flow: column nowrap;\n  justify-content: space-evenly;\n  align-items: flex-end;\n\n  background-color: var(--clr-nav-bg);\n  font-weight: 600;\n  font-size: 1.3rem;\n  position: relative;\n}\nform h2 {\n  margin: 0 auto;\n}\nform label {\n  width: 100%;\n\n  display: flex;\n  justify-content: flex-end;\n  align-items: flex-start;\n  gap: 1rem;\n}\nform input,\nform textarea,\nform select {\n  width: 13rem;\n  margin: 0 2rem;\n  padding: 5px;\n\n  background-color: var(--clr-input-bg);\n  font-size: 1.1rem;\n  font-family: inherit;\n  border: 3px solid transparent;\n  border-radius: 2px;\n\n  resize: none;\n}\nform button {\n  margin: 0 auto;\n\n  font-size: inherit;\n  font-family: inherit;\n  padding: 0.2em 0.5em;\n  background-color: var(--clr-nav-btn);\n  color: white;\n  border: 2px solid white;\n  border-radius: 5px;\n}\nform button:hover {\n  background-color: #ffee04;\n  color: black;\n  cursor: pointer;\n}\nform .close-modal-btn {\n  position: absolute;\n  top: 10px;\n  right: 10px;\n  font-size: 1rem;\n  border-radius: 50%;\n}\n\ndialog::backdrop {\n  background-color: #00000091;\n  backdrop-filter: blur(1px);\n}\n\n.create-project {\n  width: 300px;\n  height: 200px;\n}\n.create-project input {\n  margin: 0 auto;\n}\n\n/* UTILS */\n.cursor {\n  cursor: pointer;\n}\n.cursor-disabled {\n  cursor: not-allowed;\n}\n.required-effect {\n  border: 3px solid red;\n}\n\n@keyframes required-animation {\n  0% {\n    background-color: red;\n  }\n  100% {\n    background-color: var(--clr-input-bg);\n  }\n}\n","",{version:3,sources:["webpack://./src/css/main.css"],names:[],mappings:"AACA;EACE,sBAAsB;EACtB,wBAAwB;EACxB,qBAAqB;EACrB,sBAAsB;;EAEtB,sBAAsB;EACtB,qBAAqB;EACrB,4BAA4B;EAC5B,uBAAuB;;EAEvB,8BAA8B;EAC9B,mCAAmC;EACnC,+BAA+B;;EAE/B,sCAAsC;EACtC,yCAAyC;EACzC,4BAA4B;AAC9B;;AAEA,WAAW;AACX;EACE,UAAU;EACV,SAAS;EACT,sBAAsB;AACxB;AACA;EACE,aAAa;EACb,4BAA4B;EAC5B,6CAA6C;EAC7C,iBAAiB;EACjB,WAAW;EACX,SAAS;EACT,oCAAoC;;EAEpC,kDAAkD;EAClD,iBAAiB;AACnB;;AAEA,WAAW;AACX;EACE,aAAa;EACb,gBAAgB;;EAEhB,aAAa;EACb,mBAAmB;EACnB,8BAA8B;EAC9B,eAAe;;EAEf,sCAAsC;EACtC,2CAA2C;AAC7C;AACA;EACE,sBAAsB;AACxB;AACA;EACE,aAAa;EACb,6BAA6B;EAC7B,mBAAmB;EACnB,WAAW;AACb;AACA;EACE,iBAAiB;EACjB,kBAAkB;EAClB,4BAA4B;EAC5B,gBAAgB;EAChB,6BAA6B;AAC/B;AACA,iBAAiB;AACjB;EACE,mCAAmC;AACrC;AACA,iBAAiB;AACjB;EACE,mCAAmC;EACnC,uBAAuB;EACvB,kBAAkB;AACpB;;AAEA;EACE,aAAa;EACb,gBAAgB;;EAEhB,aAAa;EACb,wBAAwB;EACxB,qBAAqB;EACrB,SAAS;;EAET,sBAAsB;;EAEtB,mCAAmC;AACrC;AACA;EACE,aAAa;EACb,iBAAiB;EACjB,SAAS;AACX;AACA;EACE,aAAa;EACb,yBAAyB;;EAEzB,iBAAiB;EACjB,oCAAoC;EACpC,YAAY;EACZ,aAAa;EACb,kBAAkB;EAClB,yCAAyC;AAC3C;AACA;EACE,iBAAiB;EACjB,iBAAiB;AACnB;AACA;EACE,YAAY;EACZ,eAAe;AACjB;;AAEA;EACE,kBAAkB;EAClB,UAAU;AACZ;AACA;EACE,mCAAmC;EACnC,wBAAwB;AAC1B;AACA;EACE,cAAc;EACd,kBAAkB;EAClB,gBAAgB;AAClB;AACA;EACE,mCAAmC;EACnC,wBAAwB;AAC1B;;AAEA;EACE,aAAa;EACb,gBAAgB;;EAEhB,aAAa;EACb,oCAAoC;EACpC,2CAA2C;EAC3C,kBAAkB;AACpB;AACA;EACE,aAAa;EACb,6BAA6B;EAC7B,mBAAmB;EACnB,kBAAkB;AACpB;AACA;EACE,kBAAkB;EAClB,oBAAoB;AACtB;AACA;EACE,gBAAgB;;EAEhB,aAAa;EACb,4DAA4D;EAC5D,yDAAyD;EACzD,qBAAqB;EACrB,SAAS;AACX;AACA;EACE,oCAAoC;EACpC,8BAA8B;EAC9B,oCAAoC;EACpC,4BAA4B;EAC5B,uBAAuB;EACvB,+CAA+C;;EAE/C,aAAa;EACb,wBAAwB;EACxB,6BAA6B;;EAE7B,kBAAkB;AACpB;AACA;EACE,+CAA+C;AACjD;AACA;EACE,kBAAkB;EAClB,aAAa;EACb,wBAAwB;EACxB,6BAA6B;EAC7B,YAAY;EACZ,6BAA6B;EAC7B,YAAY;EACZ,WAAW;AACb;AACA;EACE,iBAAiB;EACjB,aAAa;EACb,cAAc;EACd,YAAY;EACZ,eAAe;EACf,6BAA6B;EAC7B,YAAY;EACZ,kBAAkB;;EAElB,yCAAyC;AAC3C;AACA;EACE,YAAY;EACZ,uBAAuB;AACzB;AACA;EACE,kBAAkB;EAClB,WAAW;;EAEX,aAAa;EACb,cAAc;EACd,mBAAmB;EACnB,uBAAuB;EACvB,SAAS;;EAET,YAAY;;EAEZ,kBAAkB;EAClB,eAAe;EACf,YAAY;EACZ,mCAAmC;AACrC;AACA;EACE,eAAe;AACjB;AACA;EACE,iBAAiB;EACjB,UAAU;AACZ;;AAEA;EACE,qBAAqB;AACvB;AACA;EACE,YAAY;EACZ,qBAAqB;EACrB,kBAAkB;EAClB,uBAAuB;AACzB;AACA;EACE,YAAY;AACd;;AAEA,aAAa;AACb;EACE,2CAA2C;AAC7C;AACA;EACE,8CAA8C;AAChD;AACA;EACE,4CAA4C;AAC9C;AACA;EACE,yBAAyB;EACzB,uBAAuB;EACvB,4BAA4B;EAC5B,yCAAyC;EACzC,YAAY;EACZ,sBAAsB;AACxB;AACA;EACE,yCAAyC;EACzC,gBAAgB;AAClB;AACA;EACE;;;;GAIC;AACH;AACA;EACE;;;;GAIC;AACH;AACA;EACE;;;;GAIC;AACH;;AAEA,yBAAyB;AACzB;EACE;IACE,0BAA0B;EAC5B;AACF;;AAEA,WAAW;AACX;EACE,YAAY;EACZ,mBAAmB;EACnB,kBAAkB;;EAElB,uBAAuB;EACvB,kBAAkB;EAClB,6CAA6C;AAC/C;AACA;EACE,aAAa;EACb,YAAY;;EAEZ,aAAa;EACb,wBAAwB;EACxB,6BAA6B;EAC7B,qBAAqB;;EAErB,mCAAmC;EACnC,gBAAgB;EAChB,iBAAiB;EACjB,kBAAkB;AACpB;AACA;EACE,cAAc;AAChB;AACA;EACE,WAAW;;EAEX,aAAa;EACb,yBAAyB;EACzB,uBAAuB;EACvB,SAAS;AACX;AACA;;;EAGE,YAAY;EACZ,cAAc;EACd,YAAY;;EAEZ,qCAAqC;EACrC,iBAAiB;EACjB,oBAAoB;EACpB,6BAA6B;EAC7B,kBAAkB;;EAElB,YAAY;AACd;AACA;EACE,cAAc;;EAEd,kBAAkB;EAClB,oBAAoB;EACpB,oBAAoB;EACpB,oCAAoC;EACpC,YAAY;EACZ,uBAAuB;EACvB,kBAAkB;AACpB;AACA;EACE,yBAAyB;EACzB,YAAY;EACZ,eAAe;AACjB;AACA;EACE,kBAAkB;EAClB,SAAS;EACT,WAAW;EACX,eAAe;EACf,kBAAkB;AACpB;;AAEA;EACE,2BAA2B;EAC3B,0BAA0B;AAC5B;;AAEA;EACE,YAAY;EACZ,aAAa;AACf;AACA;EACE,cAAc;AAChB;;AAEA,UAAU;AACV;EACE,eAAe;AACjB;AACA;EACE,mBAAmB;AACrB;AACA;EACE,qBAAqB;AACvB;;AAEA;EACE;IACE,qBAAqB;EACvB;EACA;IACE,qCAAqC;EACvC;AACF",sourcesContent:['@import url("https://fonts.googleapis.com/css2?family=Poppins:ital,wght@0,100;0,200;0,300;0,400;0,500;0,600;0,700;0,800;0,900;1,100;1,200;1,300;1,400;1,500;1,600;1,700;1,800;1,900&display=swap");\n:root {\n  --clr-body-bg: #ffffff;\n  --clr-header-bg: #189ff8;\n  --clr-nav-bg: #189ff8;\n  --clr-main-bg: #ffffff;\n\n  --clr-nav-btn: #07578b;\n  --clr-accent: #00ccff;\n  --clr-complete-grad: #189ff8;\n  --clr-input-bg: #70e2ff;\n\n  --clr-prio-low: rgb(0, 255, 0);\n  --clr-prio-medium: rgb(255, 255, 0);\n  --clr-prio-high: rgb(255, 0, 0);\n\n  --clr-complete-low: rgb(179, 255, 179);\n  --clr-complete-medium: rgb(253, 253, 195);\n  --clr-complete-high: #ffbaba;\n}\n\n/* GLOBAL */\n* {\n  padding: 0;\n  margin: 0;\n  box-sizing: border-box;\n}\nbody {\n  display: grid;\n  grid-template-rows: 5rem 1fr;\n  grid-template-columns: minmax(10rem, 1fr) 4fr;\n  min-height: 100vh;\n  width: 100%;\n  gap: 10px;\n  background-color: var(--clr-body-bg);\n\n  font-family: Poppins, Arial, Helvetica, sans-serif;\n  font-size: 1.1rem;\n}\n\n/* HEADER */\nheader {\n  grid-row: 1/2;\n  grid-column: 2/3;\n\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  padding: 0 2rem;\n\n  background-color: var(--clr-header-bg);\n  box-shadow: -5px 5px 10px -5px rgb(0, 0, 0);\n}\nheader h1 {\n  vertical-align: middle;\n}\nheader .category {\n  display: flex;\n  justify-content: space-evenly;\n  align-items: center;\n  gap: 1.3rem;\n}\n.category-btn {\n  padding: 5px 10px;\n  border-radius: 5px;\n  transition: background 0.25s;\n  font-weight: 600;\n  border: 2px solid transparent;\n}\n/* HEADER.HOVER */\n.category-btn:hover {\n  background-color: var(--clr-accent);\n}\n/* Actice state */\n.category-btn.active {\n  background-color: var(--clr-accent);\n  border: 2px solid white;\n  font-style: italic;\n}\n\naside {\n  grid-row: 1/4;\n  grid-column: 1/2;\n\n  display: flex;\n  flex-flow: column nowrap;\n  align-items: flex-end;\n  gap: 2rem;\n\n  padding: 5rem 2rem 0 0;\n\n  background-color: var(--clr-nav-bg);\n}\naside .project-content {\n  display: flex;\n  flex-flow: column;\n  gap: 1rem;\n}\n.project-btn {\n  display: flex;\n  justify-content: flex-end;\n\n  border: 2px solid;\n  background-color: var(--clr-nav-btn);\n  color: white;\n  padding: 1rem;\n  border-radius: 5px;\n  transition: color 0.25s, background 0.25s;\n}\n.project-btn i {\n  margin-left: 2rem;\n  font-size: 1.2rem;\n}\n.project-btn i:hover {\n  color: black;\n  cursor: pointer;\n}\n\n.project-btn.new-project-btn {\n  border: 2px dashed;\n  opacity: 1;\n}\n.project-btn:hover {\n  background-color: var(--clr-accent);\n  color: rgb(250, 234, 11);\n}\n.all-project-btn {\n  display: block;\n  text-align: center;\n  font-weight: 600;\n}\n.project-btn.active {\n  background-color: var(--clr-accent);\n  color: rgb(250, 234, 11);\n}\n\nmain {\n  grid-row: 2/3;\n  grid-column: 2/3;\n\n  padding: 2rem;\n  background-color: var(--clr-main-bg);\n  box-shadow: -5px 5px 10px -5px rgb(0, 0, 0);\n  border-radius: 5px;\n}\n.task-container__header {\n  display: flex;\n  justify-content: space-evenly;\n  align-items: center;\n  margin-right: 5rem;\n}\n.task-container__header select {\n  font-size: inherit;\n  font-family: inherit;\n}\n.task-content {\n  margin-top: 2rem;\n\n  display: grid;\n  grid-template-columns: repeat(auto-fill, minmax(400px, 1fr));\n  grid-template-rows: repeat(auto-fill, minmax(200px, 1fr));\n  grid-auto-rows: 200px;\n  gap: 10px;\n}\n.task-card {\n  border: 2px solid rgb(170, 166, 166);\n  border-radius: 2px 5px 5px 2px;\n  background-color: var(--clr-main-bg);\n  padding: 1rem 3rem 1rem 1rem;\n  border-left: 10px solid;\n  box-shadow: -5px 5px 5px 0px rgb(216, 214, 214);\n\n  display: flex;\n  flex-flow: column nowrap;\n  justify-content: space-around;\n\n  position: relative;\n}\n.task-card:hover {\n  box-shadow: -5px 5px 5px 0px rgb(146, 146, 146);\n}\n.task-card__control {\n  position: absolute;\n  display: flex;\n  flex-flow: column nowrap;\n  justify-content: space-evenly;\n  border: none;\n  background-color: transparent;\n  height: 100%;\n  right: 10px;\n}\n.task-card__control button {\n  font-size: 1.5rem;\n  width: 2.5rem;\n  height: 2.5rem;\n  padding: 5px;\n  cursor: pointer;\n  background-color: transparent;\n  border: none;\n  border-radius: 50%;\n\n  transition: color 0.25s, background 0.25s;\n}\n.task-card__control button:hover {\n  color: white;\n  background-color: black;\n}\n.new-task-btn {\n  position: absolute;\n  right: 2rem;\n\n  display: flex;\n  flex-flow: row;\n  align-items: center;\n  justify-content: center;\n  gap: 10px;\n\n  padding: 5px;\n\n  border: 5px dotted;\n  font-size: 1rem;\n  opacity: 0.7;\n  transition: opacity 0.5s, border 1s;\n}\n.new-task-btn i {\n  font-size: 2rem;\n}\n.new-task-btn:hover {\n  border: 5px solid;\n  opacity: 1;\n}\n\nfooter {\n  margin: auto 0 1rem 0;\n}\nfooter a:any-link {\n  color: black;\n  text-decoration: none;\n  font-style: italic;\n  transition: color 0.25s;\n}\nfooter a:hover {\n  color: white;\n}\n\n/* Priority */\n.low {\n  border-left: 10px solid var(--clr-prio-low);\n}\n.medium {\n  border-left: 10px solid var(--clr-prio-medium);\n}\n.high {\n  border-left: 10px solid var(--clr-prio-high);\n}\n.complete {\n  background-position: left;\n  background-size: 0 100%;\n  background-repeat: no-repeat;\n  animation: complete-animation 1s forwards;\n  opacity: 0.5;\n  transition: opacity 1s;\n}\n.completed-before {\n  animation: complete-animation 0s forwards;\n  transition: none;\n}\n.low.complete {\n  background-image: linear-gradient(\n    90deg,\n    var(--clr-complete-low),\n    var(--clr-complete-low)\n  );\n}\n.medium.complete {\n  background-image: linear-gradient(\n    90deg,\n    var(--clr-complete-medium),\n    var(--clr-complete-medium)\n  );\n}\n.high.complete {\n  background-image: linear-gradient(\n    90deg,\n    var(--clr-complete-high),\n    var(--clr-complete-high)\n  );\n}\n\n/* Completion anumation */\n@keyframes complete-animation {\n  100% {\n    background-size: 100% 100%;\n  }\n}\n\n/* Dialog */\ndialog {\n  margin: auto;\n  height: fit-content;\n  width: fit-content;\n\n  border: 5px solid black;\n  border-radius: 5px;\n  box-shadow: -5px 5px 20px 0px rgb(56, 54, 54);\n}\nform {\n  height: 450px;\n  width: 500px;\n\n  display: flex;\n  flex-flow: column nowrap;\n  justify-content: space-evenly;\n  align-items: flex-end;\n\n  background-color: var(--clr-nav-bg);\n  font-weight: 600;\n  font-size: 1.3rem;\n  position: relative;\n}\nform h2 {\n  margin: 0 auto;\n}\nform label {\n  width: 100%;\n\n  display: flex;\n  justify-content: flex-end;\n  align-items: flex-start;\n  gap: 1rem;\n}\nform input,\nform textarea,\nform select {\n  width: 13rem;\n  margin: 0 2rem;\n  padding: 5px;\n\n  background-color: var(--clr-input-bg);\n  font-size: 1.1rem;\n  font-family: inherit;\n  border: 3px solid transparent;\n  border-radius: 2px;\n\n  resize: none;\n}\nform button {\n  margin: 0 auto;\n\n  font-size: inherit;\n  font-family: inherit;\n  padding: 0.2em 0.5em;\n  background-color: var(--clr-nav-btn);\n  color: white;\n  border: 2px solid white;\n  border-radius: 5px;\n}\nform button:hover {\n  background-color: #ffee04;\n  color: black;\n  cursor: pointer;\n}\nform .close-modal-btn {\n  position: absolute;\n  top: 10px;\n  right: 10px;\n  font-size: 1rem;\n  border-radius: 50%;\n}\n\ndialog::backdrop {\n  background-color: #00000091;\n  backdrop-filter: blur(1px);\n}\n\n.create-project {\n  width: 300px;\n  height: 200px;\n}\n.create-project input {\n  margin: 0 auto;\n}\n\n/* UTILS */\n.cursor {\n  cursor: pointer;\n}\n.cursor-disabled {\n  cursor: not-allowed;\n}\n.required-effect {\n  border: 3px solid red;\n}\n\n@keyframes required-animation {\n  0% {\n    background-color: red;\n  }\n  100% {\n    background-color: var(--clr-input-bg);\n  }\n}\n'],sourceRoot:""}]);const s=i},314:t=>{t.exports=function(t){var e=[];return e.toString=function(){return this.map((function(e){var n="",r=void 0!==e[5];return e[4]&&(n+="@supports (".concat(e[4],") {")),e[2]&&(n+="@media ".concat(e[2]," {")),r&&(n+="@layer".concat(e[5].length>0?" ".concat(e[5]):""," {")),n+=t(e),r&&(n+="}"),e[2]&&(n+="}"),e[4]&&(n+="}"),n})).join("")},e.i=function(t,n,r,o,a){"string"==typeof t&&(t=[[null,t,void 0]]);var i={};if(r)for(var s=0;s<this.length;s++){var c=this[s][0];null!=c&&(i[c]=!0)}for(var d=0;d<t.length;d++){var l=[].concat(t[d]);r&&i[l[0]]||(void 0!==a&&(void 0===l[5]||(l[1]="@layer".concat(l[5].length>0?" ".concat(l[5]):""," {").concat(l[1],"}")),l[5]=a),n&&(l[2]?(l[1]="@media ".concat(l[2]," {").concat(l[1],"}"),l[2]=n):l[2]=n),o&&(l[4]?(l[1]="@supports (".concat(l[4],") {").concat(l[1],"}"),l[4]=o):l[4]="".concat(o)),e.push(l))}},e}},354:t=>{t.exports=function(t){var e=t[1],n=t[3];if(!n)return e;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(n)))),o="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),a="/*# ".concat(o," */");return[e].concat([a]).join("\n")}return[e].join("\n")}},72:t=>{var e=[];function n(t){for(var n=-1,r=0;r<e.length;r++)if(e[r].identifier===t){n=r;break}return n}function r(t,r){for(var a={},i=[],s=0;s<t.length;s++){var c=t[s],d=r.base?c[0]+r.base:c[0],l=a[d]||0,u="".concat(d," ").concat(l);a[d]=l+1;var A=n(u),m={css:c[1],media:c[2],sourceMap:c[3],supports:c[4],layer:c[5]};if(-1!==A)e[A].references++,e[A].updater(m);else{var p=o(m,r);r.byIndex=s,e.splice(s,0,{identifier:u,updater:p,references:1})}i.push(u)}return i}function o(t,e){var n=e.domAPI(e);return n.update(t),function(e){if(e){if(e.css===t.css&&e.media===t.media&&e.sourceMap===t.sourceMap&&e.supports===t.supports&&e.layer===t.layer)return;n.update(t=e)}else n.remove()}}t.exports=function(t,o){var a=r(t=t||[],o=o||{});return function(t){t=t||[];for(var i=0;i<a.length;i++){var s=n(a[i]);e[s].references--}for(var c=r(t,o),d=0;d<a.length;d++){var l=n(a[d]);0===e[l].references&&(e[l].updater(),e.splice(l,1))}a=c}}},659:t=>{var e={};t.exports=function(t,n){var r=function(t){if(void 0===e[t]){var n=document.querySelector(t);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(t){n=null}e[t]=n}return e[t]}(t);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(n)}},540:t=>{t.exports=function(t){var e=document.createElement("style");return t.setAttributes(e,t.attributes),t.insert(e,t.options),e}},56:(t,e,n)=>{t.exports=function(t){var e=n.nc;e&&t.setAttribute("nonce",e)}},825:t=>{t.exports=function(t){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var e=t.insertStyleElement(t);return{update:function(n){!function(t,e,n){var r="";n.supports&&(r+="@supports (".concat(n.supports,") {")),n.media&&(r+="@media ".concat(n.media," {"));var o=void 0!==n.layer;o&&(r+="@layer".concat(n.layer.length>0?" ".concat(n.layer):""," {")),r+=n.css,o&&(r+="}"),n.media&&(r+="}"),n.supports&&(r+="}");var a=n.sourceMap;a&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(a))))," */")),e.styleTagTransform(r,t,e.options)}(e,t,n)},remove:function(){!function(t){if(null===t.parentNode)return!1;t.parentNode.removeChild(t)}(e)}}}},113:t=>{t.exports=function(t,e){if(e.styleSheet)e.styleSheet.cssText=t;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(t))}}},107:(t,e,n)=>{const r={lessThanXSeconds:{one:"less than a second",other:"less than {{count}} seconds"},xSeconds:{one:"1 second",other:"{{count}} seconds"},halfAMinute:"half a minute",lessThanXMinutes:{one:"less than a minute",other:"less than {{count}} minutes"},xMinutes:{one:"1 minute",other:"{{count}} minutes"},aboutXHours:{one:"about 1 hour",other:"about {{count}} hours"},xHours:{one:"1 hour",other:"{{count}} hours"},xDays:{one:"1 day",other:"{{count}} days"},aboutXWeeks:{one:"about 1 week",other:"about {{count}} weeks"},xWeeks:{one:"1 week",other:"{{count}} weeks"},aboutXMonths:{one:"about 1 month",other:"about {{count}} months"},xMonths:{one:"1 month",other:"{{count}} months"},aboutXYears:{one:"about 1 year",other:"about {{count}} years"},xYears:{one:"1 year",other:"{{count}} years"},overXYears:{one:"over 1 year",other:"over {{count}} years"},almostXYears:{one:"almost 1 year",other:"almost {{count}} years"}};function o(t){return(e={})=>{const n=e.width?String(e.width):t.defaultWidth;return t.formats[n]||t.formats[t.defaultWidth]}}const a={date:o({formats:{full:"EEEE, MMMM do, y",long:"MMMM do, y",medium:"MMM d, y",short:"MM/dd/yyyy"},defaultWidth:"full"}),time:o({formats:{full:"h:mm:ss a zzzz",long:"h:mm:ss a z",medium:"h:mm:ss a",short:"h:mm a"},defaultWidth:"full"}),dateTime:o({formats:{full:"{{date}} 'at' {{time}}",long:"{{date}} 'at' {{time}}",medium:"{{date}}, {{time}}",short:"{{date}}, {{time}}"},defaultWidth:"full"})},i={lastWeek:"'last' eeee 'at' p",yesterday:"'yesterday at' p",today:"'today at' p",tomorrow:"'tomorrow at' p",nextWeek:"eeee 'at' p",other:"P"};function s(t){return(e,n)=>{let r;if("formatting"===(n?.context?String(n.context):"standalone")&&t.formattingValues){const e=t.defaultFormattingWidth||t.defaultWidth,o=n?.width?String(n.width):e;r=t.formattingValues[o]||t.formattingValues[e]}else{const e=t.defaultWidth,o=n?.width?String(n.width):t.defaultWidth;r=t.values[o]||t.values[e]}return r[t.argumentCallback?t.argumentCallback(e):e]}}const c={ordinalNumber:(t,e)=>{const n=Number(t),r=n%100;if(r>20||r<10)switch(r%10){case 1:return n+"st";case 2:return n+"nd";case 3:return n+"rd"}return n+"th"},era:s({values:{narrow:["B","A"],abbreviated:["BC","AD"],wide:["Before Christ","Anno Domini"]},defaultWidth:"wide"}),quarter:s({values:{narrow:["1","2","3","4"],abbreviated:["Q1","Q2","Q3","Q4"],wide:["1st quarter","2nd quarter","3rd quarter","4th quarter"]},defaultWidth:"wide",argumentCallback:t=>t-1}),month:s({values:{narrow:["J","F","M","A","M","J","J","A","S","O","N","D"],abbreviated:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],wide:["January","February","March","April","May","June","July","August","September","October","November","December"]},defaultWidth:"wide"}),day:s({values:{narrow:["S","M","T","W","T","F","S"],short:["Su","Mo","Tu","We","Th","Fr","Sa"],abbreviated:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],wide:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"]},defaultWidth:"wide"}),dayPeriod:s({values:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"}},defaultWidth:"wide",formattingValues:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"}},defaultFormattingWidth:"wide"})};function d(t){return(e,n={})=>{const r=n.width,o=r&&t.matchPatterns[r]||t.matchPatterns[t.defaultMatchWidth],a=e.match(o);if(!a)return null;const i=a[0],s=r&&t.parsePatterns[r]||t.parsePatterns[t.defaultParseWidth],c=Array.isArray(s)?function(t,e){for(let e=0;e<t.length;e++)if(t[e].test(i))return e}(s):function(t,e){for(const e in t)if(Object.prototype.hasOwnProperty.call(t,e)&&t[e].test(i))return e}(s);let d;return d=t.valueCallback?t.valueCallback(c):c,d=n.valueCallback?n.valueCallback(d):d,{value:d,rest:e.slice(i.length)}}}const l={ordinalNumber:(u={matchPattern:/^(\d+)(th|st|nd|rd)?/i,parsePattern:/\d+/i,valueCallback:t=>parseInt(t,10)},(t,e={})=>{const n=t.match(u.matchPattern);if(!n)return null;const r=n[0],o=t.match(u.parsePattern);if(!o)return null;let a=u.valueCallback?u.valueCallback(o[0]):o[0];return a=e.valueCallback?e.valueCallback(a):a,{value:a,rest:t.slice(r.length)}}),era:d({matchPatterns:{narrow:/^(b|a)/i,abbreviated:/^(b\.?\s?c\.?|b\.?\s?c\.?\s?e\.?|a\.?\s?d\.?|c\.?\s?e\.?)/i,wide:/^(before christ|before common era|anno domini|common era)/i},defaultMatchWidth:"wide",parsePatterns:{any:[/^b/i,/^(a|c)/i]},defaultParseWidth:"any"}),quarter:d({matchPatterns:{narrow:/^[1234]/i,abbreviated:/^q[1234]/i,wide:/^[1234](th|st|nd|rd)? quarter/i},defaultMatchWidth:"wide",parsePatterns:{any:[/1/i,/2/i,/3/i,/4/i]},defaultParseWidth:"any",valueCallback:t=>t+1}),month:d({matchPatterns:{narrow:/^[jfmasond]/i,abbreviated:/^(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)/i,wide:/^(january|february|march|april|may|june|july|august|september|october|november|december)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^j/i,/^f/i,/^m/i,/^a/i,/^m/i,/^j/i,/^j/i,/^a/i,/^s/i,/^o/i,/^n/i,/^d/i],any:[/^ja/i,/^f/i,/^mar/i,/^ap/i,/^may/i,/^jun/i,/^jul/i,/^au/i,/^s/i,/^o/i,/^n/i,/^d/i]},defaultParseWidth:"any"}),day:d({matchPatterns:{narrow:/^[smtwf]/i,short:/^(su|mo|tu|we|th|fr|sa)/i,abbreviated:/^(sun|mon|tue|wed|thu|fri|sat)/i,wide:/^(sunday|monday|tuesday|wednesday|thursday|friday|saturday)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^s/i,/^m/i,/^t/i,/^w/i,/^t/i,/^f/i,/^s/i],any:[/^su/i,/^m/i,/^tu/i,/^w/i,/^th/i,/^f/i,/^sa/i]},defaultParseWidth:"any"}),dayPeriod:d({matchPatterns:{narrow:/^(a|p|mi|n|(in the|at) (morning|afternoon|evening|night))/i,any:/^([ap]\.?\s?m\.?|midnight|noon|(in the|at) (morning|afternoon|evening|night))/i},defaultMatchWidth:"any",parsePatterns:{any:{am:/^a/i,pm:/^p/i,midnight:/^mi/i,noon:/^no/i,morning:/morning/i,afternoon:/afternoon/i,evening:/evening/i,night:/night/i}},defaultParseWidth:"any"})};var u;const A={code:"en-US",formatDistance:(t,e,n)=>{let o;const a=r[t];return o="string"==typeof a?a:1===e?a.one:a.other.replace("{{count}}",e.toString()),n?.addSuffix?n.comparison&&n.comparison>0?"in "+o:o+" ago":o},formatLong:a,formatRelative:(t,e,n,r)=>i[t],localize:c,match:l,options:{weekStartsOn:0,firstWeekContainsDate:1}};let m={};function p(){return m}Math.pow(10,8);const f=6048e5,h=864e5,g=43200,b=1440;function C(t){const e=Object.prototype.toString.call(t);return t instanceof Date||"object"==typeof t&&"[object Date]"===e?new t.constructor(+t):"number"==typeof t||"[object Number]"===e||"string"==typeof t||"[object String]"===e?new Date(t):new Date(NaN)}function E(t){const e=C(t);return e.setHours(0,0,0,0),e}function w(t){const e=C(t),n=new Date(Date.UTC(e.getFullYear(),e.getMonth(),e.getDate(),e.getHours(),e.getMinutes(),e.getSeconds(),e.getMilliseconds()));return n.setUTCFullYear(e.getFullYear()),+t-+n}function B(t,e){return t instanceof Date?new t.constructor(e):new Date(e)}function y(t){const e=C(t);return function(t,e){const n=E(t),r=E(e),o=+n-w(n),a=+r-w(r);return Math.round((o-a)/h)}(e,function(t){const e=C(t),n=B(t,0);return n.setFullYear(e.getFullYear(),0,1),n.setHours(0,0,0,0),n}(e))+1}function k(t,e){const n=p(),r=e?.weekStartsOn??e?.locale?.options?.weekStartsOn??n.weekStartsOn??n.locale?.options?.weekStartsOn??0,o=C(t),a=o.getDay(),i=(a<r?7:0)+a-r;return o.setDate(o.getDate()-i),o.setHours(0,0,0,0),o}function x(t){return k(t,{weekStartsOn:1})}function v(t){const e=C(t),n=e.getFullYear(),r=B(t,0);r.setFullYear(n+1,0,4),r.setHours(0,0,0,0);const o=x(r),a=B(t,0);a.setFullYear(n,0,4),a.setHours(0,0,0,0);const i=x(a);return e.getTime()>=o.getTime()?n+1:e.getTime()>=i.getTime()?n:n-1}function j(t){const e=C(t),n=+x(e)-+function(t){const e=v(t),n=B(t,0);return n.setFullYear(e,0,4),n.setHours(0,0,0,0),x(n)}(e);return Math.round(n/f)+1}function M(t,e){const n=C(t),r=n.getFullYear(),o=p(),a=e?.firstWeekContainsDate??e?.locale?.options?.firstWeekContainsDate??o.firstWeekContainsDate??o.locale?.options?.firstWeekContainsDate??1,i=B(t,0);i.setFullYear(r+1,0,a),i.setHours(0,0,0,0);const s=k(i,e),c=B(t,0);c.setFullYear(r,0,a),c.setHours(0,0,0,0);const d=k(c,e);return n.getTime()>=s.getTime()?r+1:n.getTime()>=d.getTime()?r:r-1}function T(t,e){const n=C(t),r=+k(n,e)-+function(t,e){const n=p(),r=e?.firstWeekContainsDate??e?.locale?.options?.firstWeekContainsDate??n.firstWeekContainsDate??n.locale?.options?.firstWeekContainsDate??1,o=M(t,e),a=B(t,0);return a.setFullYear(o,0,r),a.setHours(0,0,0,0),k(a,e)}(n,e);return Math.round(r/f)+1}function S(t,e){return(t<0?"-":"")+Math.abs(t).toString().padStart(e,"0")}const D={y(t,e){const n=t.getFullYear(),r=n>0?n:1-n;return S("yy"===e?r%100:r,e.length)},M(t,e){const n=t.getMonth();return"M"===e?String(n+1):S(n+1,2)},d:(t,e)=>S(t.getDate(),e.length),a(t,e){const n=t.getHours()/12>=1?"pm":"am";switch(e){case"a":case"aa":return n.toUpperCase();case"aaa":return n;case"aaaaa":return n[0];default:return"am"===n?"a.m.":"p.m."}},h:(t,e)=>S(t.getHours()%12||12,e.length),H:(t,e)=>S(t.getHours(),e.length),m:(t,e)=>S(t.getMinutes(),e.length),s:(t,e)=>S(t.getSeconds(),e.length),S(t,e){const n=e.length,r=t.getMilliseconds();return S(Math.trunc(r*Math.pow(10,n-3)),e.length)}},L={G:function(t,e,n){const r=t.getFullYear()>0?1:0;switch(e){case"G":case"GG":case"GGG":return n.era(r,{width:"abbreviated"});case"GGGGG":return n.era(r,{width:"narrow"});default:return n.era(r,{width:"wide"})}},y:function(t,e,n){if("yo"===e){const e=t.getFullYear(),r=e>0?e:1-e;return n.ordinalNumber(r,{unit:"year"})}return D.y(t,e)},Y:function(t,e,n,r){const o=M(t,r),a=o>0?o:1-o;return"YY"===e?S(a%100,2):"Yo"===e?n.ordinalNumber(a,{unit:"year"}):S(a,e.length)},R:function(t,e){return S(v(t),e.length)},u:function(t,e){return S(t.getFullYear(),e.length)},Q:function(t,e,n){const r=Math.ceil((t.getMonth()+1)/3);switch(e){case"Q":return String(r);case"QQ":return S(r,2);case"Qo":return n.ordinalNumber(r,{unit:"quarter"});case"QQQ":return n.quarter(r,{width:"abbreviated",context:"formatting"});case"QQQQQ":return n.quarter(r,{width:"narrow",context:"formatting"});default:return n.quarter(r,{width:"wide",context:"formatting"})}},q:function(t,e,n){const r=Math.ceil((t.getMonth()+1)/3);switch(e){case"q":return String(r);case"qq":return S(r,2);case"qo":return n.ordinalNumber(r,{unit:"quarter"});case"qqq":return n.quarter(r,{width:"abbreviated",context:"standalone"});case"qqqqq":return n.quarter(r,{width:"narrow",context:"standalone"});default:return n.quarter(r,{width:"wide",context:"standalone"})}},M:function(t,e,n){const r=t.getMonth();switch(e){case"M":case"MM":return D.M(t,e);case"Mo":return n.ordinalNumber(r+1,{unit:"month"});case"MMM":return n.month(r,{width:"abbreviated",context:"formatting"});case"MMMMM":return n.month(r,{width:"narrow",context:"formatting"});default:return n.month(r,{width:"wide",context:"formatting"})}},L:function(t,e,n){const r=t.getMonth();switch(e){case"L":return String(r+1);case"LL":return S(r+1,2);case"Lo":return n.ordinalNumber(r+1,{unit:"month"});case"LLL":return n.month(r,{width:"abbreviated",context:"standalone"});case"LLLLL":return n.month(r,{width:"narrow",context:"standalone"});default:return n.month(r,{width:"wide",context:"standalone"})}},w:function(t,e,n,r){const o=T(t,r);return"wo"===e?n.ordinalNumber(o,{unit:"week"}):S(o,e.length)},I:function(t,e,n){const r=j(t);return"Io"===e?n.ordinalNumber(r,{unit:"week"}):S(r,e.length)},d:function(t,e,n){return"do"===e?n.ordinalNumber(t.getDate(),{unit:"date"}):D.d(t,e)},D:function(t,e,n){const r=y(t);return"Do"===e?n.ordinalNumber(r,{unit:"dayOfYear"}):S(r,e.length)},E:function(t,e,n){const r=t.getDay();switch(e){case"E":case"EE":case"EEE":return n.day(r,{width:"abbreviated",context:"formatting"});case"EEEEE":return n.day(r,{width:"narrow",context:"formatting"});case"EEEEEE":return n.day(r,{width:"short",context:"formatting"});default:return n.day(r,{width:"wide",context:"formatting"})}},e:function(t,e,n,r){const o=t.getDay(),a=(o-r.weekStartsOn+8)%7||7;switch(e){case"e":return String(a);case"ee":return S(a,2);case"eo":return n.ordinalNumber(a,{unit:"day"});case"eee":return n.day(o,{width:"abbreviated",context:"formatting"});case"eeeee":return n.day(o,{width:"narrow",context:"formatting"});case"eeeeee":return n.day(o,{width:"short",context:"formatting"});default:return n.day(o,{width:"wide",context:"formatting"})}},c:function(t,e,n,r){const o=t.getDay(),a=(o-r.weekStartsOn+8)%7||7;switch(e){case"c":return String(a);case"cc":return S(a,e.length);case"co":return n.ordinalNumber(a,{unit:"day"});case"ccc":return n.day(o,{width:"abbreviated",context:"standalone"});case"ccccc":return n.day(o,{width:"narrow",context:"standalone"});case"cccccc":return n.day(o,{width:"short",context:"standalone"});default:return n.day(o,{width:"wide",context:"standalone"})}},i:function(t,e,n){const r=t.getDay(),o=0===r?7:r;switch(e){case"i":return String(o);case"ii":return S(o,e.length);case"io":return n.ordinalNumber(o,{unit:"day"});case"iii":return n.day(r,{width:"abbreviated",context:"formatting"});case"iiiii":return n.day(r,{width:"narrow",context:"formatting"});case"iiiiii":return n.day(r,{width:"short",context:"formatting"});default:return n.day(r,{width:"wide",context:"formatting"})}},a:function(t,e,n){const r=t.getHours()/12>=1?"pm":"am";switch(e){case"a":case"aa":return n.dayPeriod(r,{width:"abbreviated",context:"formatting"});case"aaa":return n.dayPeriod(r,{width:"abbreviated",context:"formatting"}).toLowerCase();case"aaaaa":return n.dayPeriod(r,{width:"narrow",context:"formatting"});default:return n.dayPeriod(r,{width:"wide",context:"formatting"})}},b:function(t,e,n){const r=t.getHours();let o;switch(o=12===r?"noon":0===r?"midnight":r/12>=1?"pm":"am",e){case"b":case"bb":return n.dayPeriod(o,{width:"abbreviated",context:"formatting"});case"bbb":return n.dayPeriod(o,{width:"abbreviated",context:"formatting"}).toLowerCase();case"bbbbb":return n.dayPeriod(o,{width:"narrow",context:"formatting"});default:return n.dayPeriod(o,{width:"wide",context:"formatting"})}},B:function(t,e,n){const r=t.getHours();let o;switch(o=r>=17?"evening":r>=12?"afternoon":r>=4?"morning":"night",e){case"B":case"BB":case"BBB":return n.dayPeriod(o,{width:"abbreviated",context:"formatting"});case"BBBBB":return n.dayPeriod(o,{width:"narrow",context:"formatting"});default:return n.dayPeriod(o,{width:"wide",context:"formatting"})}},h:function(t,e,n){if("ho"===e){let e=t.getHours()%12;return 0===e&&(e=12),n.ordinalNumber(e,{unit:"hour"})}return D.h(t,e)},H:function(t,e,n){return"Ho"===e?n.ordinalNumber(t.getHours(),{unit:"hour"}):D.H(t,e)},K:function(t,e,n){const r=t.getHours()%12;return"Ko"===e?n.ordinalNumber(r,{unit:"hour"}):S(r,e.length)},k:function(t,e,n){let r=t.getHours();return 0===r&&(r=24),"ko"===e?n.ordinalNumber(r,{unit:"hour"}):S(r,e.length)},m:function(t,e,n){return"mo"===e?n.ordinalNumber(t.getMinutes(),{unit:"minute"}):D.m(t,e)},s:function(t,e,n){return"so"===e?n.ordinalNumber(t.getSeconds(),{unit:"second"}):D.s(t,e)},S:function(t,e){return D.S(t,e)},X:function(t,e,n){const r=t.getTimezoneOffset();if(0===r)return"Z";switch(e){case"X":return Y(r);case"XXXX":case"XX":return q(r);default:return q(r,":")}},x:function(t,e,n){const r=t.getTimezoneOffset();switch(e){case"x":return Y(r);case"xxxx":case"xx":return q(r);default:return q(r,":")}},O:function(t,e,n){const r=t.getTimezoneOffset();switch(e){case"O":case"OO":case"OOO":return"GMT"+P(r,":");default:return"GMT"+q(r,":")}},z:function(t,e,n){const r=t.getTimezoneOffset();switch(e){case"z":case"zz":case"zzz":return"GMT"+P(r,":");default:return"GMT"+q(r,":")}},t:function(t,e,n){return S(Math.trunc(t.getTime()/1e3),e.length)},T:function(t,e,n){return S(t.getTime(),e.length)}};function P(t,e=""){const n=t>0?"-":"+",r=Math.abs(t),o=Math.trunc(r/60),a=r%60;return 0===a?n+String(o):n+String(o)+e+S(a,2)}function Y(t,e){return t%60==0?(t>0?"-":"+")+S(Math.abs(t)/60,2):q(t,e)}function q(t,e=""){const n=t>0?"-":"+",r=Math.abs(t);return n+S(Math.trunc(r/60),2)+e+S(r%60,2)}const W=(t,e)=>{switch(t){case"P":return e.date({width:"short"});case"PP":return e.date({width:"medium"});case"PPP":return e.date({width:"long"});default:return e.date({width:"full"})}},z=(t,e)=>{switch(t){case"p":return e.time({width:"short"});case"pp":return e.time({width:"medium"});case"ppp":return e.time({width:"long"});default:return e.time({width:"full"})}},H={p:z,P:(t,e)=>{const n=t.match(/(P+)(p+)?/)||[],r=n[1],o=n[2];if(!o)return W(t,e);let a;switch(r){case"P":a=e.dateTime({width:"short"});break;case"PP":a=e.dateTime({width:"medium"});break;case"PPP":a=e.dateTime({width:"long"});break;default:a=e.dateTime({width:"full"})}return a.replace("{{date}}",W(r,e)).replace("{{time}}",z(o,e))}},N=/^D+$/,O=/^Y+$/,F=["D","DD","YY","YYYY"];function I(t){if(!(e=t,e instanceof Date||"object"==typeof e&&"[object Date]"===Object.prototype.toString.call(e)||"number"==typeof t))return!1;var e;const n=C(t);return!isNaN(Number(n))}const X=/[yYQqMLwIdDecihHKkms]o|(\w)\1*|''|'(''|[^'])+('|$)|./g,_=/P+p+|P+|p+|''|'(''|[^'])+('|$)|./g,U=/^'([^]*?)'?$/,R=/''/g,V=/[a-zA-Z]/;function G(t){const e=t.match(U);return e?e[1].replace(R,"'"):t}const Z={randomUUID:"undefined"!=typeof crypto&&crypto.randomUUID&&crypto.randomUUID.bind(crypto)};let Q;const J=new Uint8Array(16);function $(){if(!Q&&(Q="undefined"!=typeof crypto&&crypto.getRandomValues&&crypto.getRandomValues.bind(crypto),!Q))throw new Error("crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported");return Q(J)}const K=[];for(let t=0;t<256;++t)K.push((t+256).toString(16).slice(1));const tt=function(t,e,n){if(Z.randomUUID&&!e&&!t)return Z.randomUUID();const r=(t=t||{}).random||(t.rng||$)();if(r[6]=15&r[6]|64,r[8]=63&r[8]|128,e){n=n||0;for(let t=0;t<16;++t)e[n+t]=r[t];return e}return function(t,e=0){return K[t[e+0]]+K[t[e+1]]+K[t[e+2]]+K[t[e+3]]+"-"+K[t[e+4]]+K[t[e+5]]+"-"+K[t[e+6]]+K[t[e+7]]+"-"+K[t[e+8]]+K[t[e+9]]+"-"+K[t[e+10]]+K[t[e+11]]+K[t[e+12]]+K[t[e+13]]+K[t[e+14]]+K[t[e+15]]}(r)};class et{static projectList=[];tasks=[];completedTasks=[];constructor(t){this.name=t,this.id=tt(),et.projectList.push(this)}deleteSelf(){const t=et.projectList.indexOf(this);et.projectList.splice(t,1)}addTask(t){this.tasks.push(t)}addCompletedTask(t){this.completedTasks.push(t)}removeTask(t){const e=this.tasks.findIndex((e=>e.id===t.id)),n=this.completedTasks.findIndex((e=>e.id===t.id));-1!==e?(console.log(e),this.tasks.splice(e,1)):-1!==n&&this.completedTasks.splice(n,1)}completeTask(t){t.completed=!0,this.removeTask(t),this.completedTasks.push(t)}}class nt{completed=!1;constructor(t,e="Why didn't you give us description? Am i that worthless like our creator?",n,r=1,o=!1){this.title=t,this.desc=e,this.dueDate=function(t,e,n){const r=p(),o=n?.locale??r.locale??A,a=n?.firstWeekContainsDate??n?.locale?.options?.firstWeekContainsDate??r.firstWeekContainsDate??r.locale?.options?.firstWeekContainsDate??1,i=n?.weekStartsOn??n?.locale?.options?.weekStartsOn??r.weekStartsOn??r.locale?.options?.weekStartsOn??0,s=C(t);if(!I(s))throw new RangeError("Invalid time value");let c=e.match(_).map((t=>{const e=t[0];return"p"===e||"P"===e?(0,H[e])(t,o.formatLong):t})).join("").match(X).map((t=>{if("''"===t)return{isToken:!1,value:"'"};const e=t[0];if("'"===e)return{isToken:!1,value:G(t)};if(L[e])return{isToken:!0,value:t};if(e.match(V))throw new RangeError("Format string contains an unescaped latin alphabet character `"+e+"`");return{isToken:!1,value:t}}));o.localize.preprocessor&&(c=o.localize.preprocessor(s,c));const d={firstWeekContainsDate:a,weekStartsOn:i,locale:o};return c.map((r=>{if(!r.isToken)return r.value;const a=r.value;return(!n?.useAdditionalWeekYearTokens&&function(t){return O.test(t)}(a)||!n?.useAdditionalDayOfYearTokens&&function(t){return N.test(t)}(a))&&function(t,e,n){const r=function(t,e,n){const r="Y"===t[0]?"years":"days of the month";return`Use \`${t.toLowerCase()}\` instead of \`${t}\` (in \`${e}\`) for formatting ${r} to the input \`${n}\`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md`}(t,e,n);if(console.warn(r),F.includes(t))throw new RangeError(r)}(a,e,String(t)),(0,L[a[0]])(s,a,o.localize,d)})).join("")}(new Date(n),"E',' d MMM uuuu"),this._date=new Date(n).toISOString().split("T")[0],this.priority=r,this.completed=o,this.id=tt()}}function rt(t){return B(t,Date.now())}[{name:"School",tasks:["Complete Math Homework","Study for Science Test","Write History Essay","Prepare for Presentation","Read Literature Book"]},{name:"Home",tasks:["Clean Room","Do Laundry","Cook Dinner","Water Plants","Walk the Dog"]},{name:"Work",tasks:["Finish Project Proposal","Attend Team Meeting","Review Code","Send Report to Manager","Schedule Client Meeting"]}].forEach((t=>{!function(t,e){const n=new et(t);e.forEach((t=>{const e=[1,2,3],r=e[Math.floor(Math.random()*e.length)],o=(a=new Date,i=new Date(Date.now()+2592e6),new Date(a.getTime()+Math.random()*(i.getTime()-a.getTime())));var a,i;const s=new nt(t,`Long description for '${t}', which is too much trouble to set individually, so here you go`,o,r);n.addTask(s)}))}(t.name,t.tasks)}));const ot=et.projectList,at=()=>{localStorage.setItem("data",JSON.stringify(et.projectList))};function it(t,e){const n=C(t),r=C(e),o=n.getTime()-r.getTime();return o<0?-1:o>0?1:o}function st(t){const e=C(t);return+function(t){const e=C(t);return e.setHours(23,59,59,999),e}(e)==+function(t){const e=C(t),n=e.getMonth();return e.setFullYear(e.getFullYear(),n+1,0),e.setHours(23,59,59,999),e}(e)}function ct(t,e){const n=C(t),r=C(e),o=it(n,r),a=Math.abs(function(t,e){const n=C(t),r=C(e);return 12*(n.getFullYear()-r.getFullYear())+(n.getMonth()-r.getMonth())}(n,r));let i;if(a<1)i=0;else{1===n.getMonth()&&n.getDate()>27&&n.setDate(30),n.setMonth(n.getMonth()-o*a);let e=it(n,r)===-o;st(C(t))&&1===a&&1===it(t,r)&&(e=!1),i=o*(a-Number(e))}return 0===i?0:i}function dt(t,e,n){const r=function(t,e){return+C(t)-+C(e)}(t,e)/1e3;return(o=n?.roundingMethod,t=>{const e=(o?Math[o]:Math.trunc)(t);return 0===e?0:e})(r);var o}function lt(t,e){return function(t,e,n){const r=p(),o=n?.locale??r.locale??A,a=it(t,e);if(isNaN(a))throw new RangeError("Invalid time value");const i=Object.assign({},n,{addSuffix:n?.addSuffix,comparison:a});let s,c;a>0?(s=C(e),c=C(t)):(s=C(t),c=C(e));const d=dt(c,s),l=(w(c)-w(s))/1e3,u=Math.round((d-l)/60);let m;if(u<2)return n?.includeSeconds?d<5?o.formatDistance("lessThanXSeconds",5,i):d<10?o.formatDistance("lessThanXSeconds",10,i):d<20?o.formatDistance("lessThanXSeconds",20,i):d<40?o.formatDistance("halfAMinute",0,i):d<60?o.formatDistance("lessThanXMinutes",1,i):o.formatDistance("xMinutes",1,i):0===u?o.formatDistance("lessThanXMinutes",1,i):o.formatDistance("xMinutes",u,i);if(u<45)return o.formatDistance("xMinutes",u,i);if(u<90)return o.formatDistance("aboutXHours",1,i);if(u<b){const t=Math.round(u/60);return o.formatDistance("aboutXHours",t,i)}if(u<2520)return o.formatDistance("xDays",1,i);if(u<g){const t=Math.round(u/b);return o.formatDistance("xDays",t,i)}if(u<2*g)return m=Math.round(u/g),o.formatDistance("aboutXMonths",m,i);if(m=ct(c,s),m<12){const t=Math.round(u/g);return o.formatDistance("xMonths",t,i)}{const t=m%12,e=Math.trunc(m/12);return t<3?o.formatDistance("aboutXYears",e,i):t<9?o.formatDistance("overXYears",e,i):o.formatDistance("almostXYears",e+1,i)}}(t,rt(t),e)}const ut=["undefined","low","medium","high"],At={createAllProjectBtn:()=>{const t=document.createElement("div");t.classList.add("project-btn","all-project-btn","cursor"),t.dataset.project="all";const e=document.createElement("p");return e.textContent="All Projects",t.appendChild(e),ft.projectsView.appendChild(t),t.addEventListener("click",(()=>{document.querySelectorAll(".project-btn").forEach((t=>{t.classList.remove("active")})),t.classList.add("active"),gt("all"),Ct.task("all")})),t},createProjectBtn:t=>{const e=document.createElement("div");e.classList.add("project-btn","cursor"),e.dataset.project=t.id;const n=document.createElement("p");n.appendChild(document.createTextNode(t.name));const r=document.createElement("i");return r.classList.add("fa-solid","fa-xmark"),r.dataset.deleteProject=t.id,r.addEventListener("click",(n=>{n.stopPropagation(),t.deleteSelf(),at(),ft.projectsView.removeChild(e),Ct.task("all")})),n.appendChild(r),e.addEventListener("click",(()=>{document.querySelectorAll(".project-btn").forEach((t=>{t.classList.remove("active")})),e.classList.add("active"),gt(t),Ct.task(t)})),e.appendChild(n),e},createTask:t=>{const e=[{dataSet:"data-edit",iconClass:["fa-regular","fa-pen-to-square"],func(t){(t=>{t.completed||(ft.dialog.innerHTML="",ft.dialog.classList.remove(".create-project"),ft.dialog.appendChild(mt.editTask(t)),ft.dialog.showModal(),at())})(t)}},{dataSet:"data-delete",iconClass:["fa-solid","fa-trash"],func(t){(t=>{for(const e of et.projectList)e.tasks.forEach((n=>{t.id==n.id&&(e.removeTask(t),ft.tasksView.removeChild(document.querySelector(`[data-task-id="${t.id}"]`)))})),e.completedTasks.forEach((n=>{t.id==n.id&&(e.removeTask(t),ft.tasksView.removeChild(document.querySelector(`[data-task-id="${t.id}"]`)))}));at()})(t)}},{dataSet:"data-finish",iconClass:["fa-solid","fa-check"],func(t,e){(t=>{const e=ft.tasksView.querySelectorAll(".task-card");for(const n of e)if(n.dataset.taskId===t.id){if(n.classList.contains("complete")||n.classList.contains("completed-before"))return;if(t){const e=et.projectList.findIndex((e=>e.tasks.some((e=>e.id===t.id))));et.projectList[e].completeTask(t)}n.classList.add("complete")}at()})(t)}}],n=document.createElement("div");n.classList.add("task-card",ut[t.priority]),n.dataset.taskId=t.id,t.completed&&(n.classList.add("complete"),n.classList.add("completed-before"));const r=document.createElement("h3");r.textContent=t.title,n.appendChild(r);const o=document.createElement("p");o.textContent=t.desc,n.appendChild(o);const a=document.createElement("p2");a.textContent="Dues in ";const i=document.createElement("strong");i.textContent=lt(t._date),i.textContent+=new Date>new Date(t._date)?" ago.. ":"",a.appendChild(i),n.appendChild(a);const s=document.createElement("button");s.classList.add("task-card__control");for(const n of e){const e=document.createElement("button");e.setAttribute("type","button"),e.setAttribute(n.dataSet,t.id),e.addEventListener("click",(()=>{n.func(t)}));const r=document.createElement("i");r.classList.add(n.iconClass[0],n.iconClass[1]),e.appendChild(r),s.appendChild(e)}return n.appendChild(s),n}},mt=(()=>{const t=(t,e,n)=>{const r=document.createElement("form");r.setAttribute("action",""),r.setAttribute("method","dialog");const o=document.createElement("button");o.setAttribute("type","button"),o.className="close-modal-btn",o.innerHTML='<i class="fa-solid fa-xmark"></i>',o.addEventListener("click",(()=>ft.dialog.close())),r.appendChild(o);const a=document.createElement("h2");a.className="dialog-title",a.textContent=ft.dialogTitle,r.appendChild(a);const i=document.createElement("label");i.setAttribute("for","task-title"),i.textContent="*Task Name ";const s=document.createElement("input");s.setAttribute("type","text"),s.setAttribute("id","task-title"),s.setAttribute("required","true"),s.value=n?n.title:"",i.appendChild(s),r.appendChild(i);const c=document.createElement("label");c.setAttribute("for","task-desc"),c.textContent="Description ";const d=document.createElement("textarea");d.setAttribute("name","task-desc"),d.setAttribute("id","task-desc"),d.setAttribute("placeholder","Long description for this task (optional)"),d.setAttribute("rows","4"),d.value=n?n.desc:"",c.appendChild(d),r.appendChild(c);const l=document.createElement("label");l.setAttribute("for","task-due-date"),l.textContent="*Due Date ";const u=document.createElement("input");u.setAttribute("type","date"),u.setAttribute("required","true"),u.setAttribute("name","task-due-date"),u.setAttribute("id","task-due-date"),u.value=n?n._date:"",l.appendChild(u),r.appendChild(l);const A=document.createElement("label");A.setAttribute("for","task-priority"),A.textContent="Priority ";const m=document.createElement("select");m.setAttribute("name","task-priority"),m.setAttribute("id","task-priority");const p=["Low","Medium","High"];p.forEach((t=>{const e=document.createElement("option");e.setAttribute("value",p.indexOf(t)+1),e.textContent=t,n&&n.priority===p.indexOf(t)+1&&(e.selected=!0),m.appendChild(e)})),A.appendChild(m),r.appendChild(A);const f=document.createElement("label");f.setAttribute("for","project-parent"),f.textContent="Project ";const h=document.createElement("select");h.setAttribute("name","project-parent"),h.setAttribute("id","project-parent");const g=et.projectList;for(const[t,e]of g.entries()){const o=document.createElement("option");o.value=t,o.textContent=e.name,n||(e===ht&&(o.selected="true"),h.appendChild(o),f.appendChild(h),r.appendChild(f))}const b=document.createElement("button");return b.setAttribute("type","submit"),b.className="submit-modal",b.textContent="Confirm",b.addEventListener("click",(t=>{const o=r.querySelectorAll("[required]");for(const e of o){if(!e.value)return e.classList.add("required-effect"),alert("Please fill out all required fields!"),void t.preventDefault();e.classList.remove("required-effect")}"create"===e?Et.createTask(s.value,d.value,new Date(u.value),m.value,et.projectList[h.value]):"edit"===e&&Et.editTask(s.value,d.value,new Date(u.value),m.value,n.completed,et.projectList[h.value],n)})),r.appendChild(b),r};return{project:()=>{const t=document.createElement("form");t.setAttribute("action",""),t.setAttribute("method","templateEl.dialog"),t.classList.add("create-project");const e=document.createElement("button");e.setAttribute("type","button"),e.className="close-modal-btn",e.innerHTML='<i class="fa-solid fa-xmark"></i>',e.addEventListener("click",(()=>ft.dialog.close())),t.appendChild(e);const n=document.createElement("h2");n.className="templateEl.dialog-title",n.textContent="New Project",t.appendChild(n);const r=document.createElement("input");r.setAttribute("type","text"),r.setAttribute("id","task-title"),r.setAttribute("placeholder","Project names"),r.setAttribute("required","true"),r.setAttribute("autofocus","true"),t.appendChild(r);const o=document.createElement("button");return o.setAttribute("type","submit"),o.className="submit-modal",o.textContent="Confirm",o.addEventListener("click",(t=>{if(!r.value)return alert("Huh? i thought you want to create a project.."),void(r.placeholder="You type the name here, smart guy");t.preventDefault(),ft.dialog.close(),Et.createProject(r.value)})),t.appendChild(o),t},createTask:()=>t(0,"create"),editTask:e=>t(0,"edit",e),createTaskForm:t}})(),pt={isToday:function(t){return e=t,n=rt(t),+E(e)==+E(n);var e,n},isThisWeek:function(t,e){return function(t,e,n){return+k(t,n)==+k(e,n)}(t,rt(t),e)},isThisMonth:function(t){return function(t,e){const n=C(t),r=C(e);return n.getFullYear()===r.getFullYear()&&n.getMonth()===r.getMonth()}(t,rt(t))}},ft={projectsView:document.querySelector(".project-content"),tasksView:document.querySelector(".task-content"),newProjectBtn:document.querySelector(".new-project-btn"),newTaskBtn:document.querySelector(".new-task-btn"),dialog:document.querySelector("dialog"),sortSelect:document.getElementById("sort"),timePeriodBtns:document.querySelectorAll(".category-btn")};ft.sortSelect.addEventListener("change",(()=>{Ct.task(ht)})),ft.timePeriodBtns.forEach((t=>{t.addEventListener("click",(e=>{for(const t of ft.timePeriodBtns)t.classList.remove("active");e.target.classList.add("active"),bt=t.dataset.category,Ct.task(ht)}))})),ft.newTaskBtn.addEventListener("click",(()=>{if(0===et.projectList.length)return alert("You need to have at least 1 project!"),ft.dialog.innerHTML="",ft.dialog.appendChild(mt.project()),void ft.dialog.showModal();ft.dialog.innerHTML="",ft.dialog.appendChild(mt.createTask()),ft.dialog.showModal()})),ft.newProjectBtn.addEventListener("click",(()=>{ft.dialog.innerHTML="",ft.dialog.appendChild(mt.project()),ft.dialog.showModal()}));let ht="all";function gt(t){ht=t}let bt="all";const Ct=(()=>{const t=t=>"all"===bt?t:t.filter((t=>pt[bt](t._date))),e=t=>{const e=ft.sortSelect.value;if("priority"===e){t.sort((function(t,e){return e.priority-t.priority}));for(const e of t)ft.tasksView.appendChild(At.createTask(e))}else if("closest"===e){t.sort((function(t,e){return new Date(t._date)-new Date(e._date)}));for(const e of t)ft.tasksView.appendChild(At.createTask(e))}};return{task:n=>{if(ft.tasksView.innerHTML="","all"===n){const n=[],r=[];for(const t of et.projectList)for(const e of t.tasks)n.push(e);for(const t of et.projectList)for(const e of t.completedTasks)r.push(e);e(t(n)),e(t(r))}else e(t(n.tasks)),e(t(n.completedTasks))},sortTasks:e,project:()=>{ft.projectsView.innerHTML="",ft.projectsView.appendChild(At.createAllProjectBtn());for(const t of et.projectList)ft.projectsView.appendChild(At.createProjectBtn(t))}}})(),Et={createProject:t=>{new et(t),Ct.project(et.projectList),at()},createTask:(t,e,n,r,o)=>{const a=new nt(t,e,n,r);o.addTask(a),Ct.task(o),at()},editTask:(t,e,n,r,o,a)=>{const i=o.tasks.indexOf(a);console.log(o,i),o.tasks[i].title=t,o.tasks[i].desc=e,o.tasks[i].dueDate=n,o.tasks[i].priority=r,Ct.task(o),at()}};var wt=n(72),Bt=n.n(wt),yt=n(825),kt=n.n(yt),xt=n(659),vt=n.n(xt),jt=n(56),Mt=n.n(jt),Tt=n(540),St=n.n(Tt),Dt=n(113),Lt=n.n(Dt),Pt=n(944),Yt={};function qt(){(()=>{et.projectList.length=0;const t=JSON.parse(localStorage.getItem("data"));for(const e of t){const t=new et(e.name);for(const n of e.tasks){const e=new nt(n.title,n.desc,n.dueDate,n.priority,n.completed);t.addTask(e)}for(const n of e.completedTasks){const e=new nt(n.title,n.desc,n.dueDate,n.priority,n.completed);t.addCompletedTask(e)}}})(),Ct.project(et.projectList),Ct.task("all")}Yt.styleTagTransform=Lt(),Yt.setAttributes=Mt(),Yt.insert=vt().bind(null,"head"),Yt.domAPI=kt(),Yt.insertStyleElement=St(),Bt()(Pt.A,Yt),Pt.A&&Pt.A.locals&&Pt.A.locals,localStorage.getItem("data")&&"[]"!==localStorage.getItem("data")?(console.log("data found"),qt()):(console.log("data not found"),et.projectList=ot,at(),qt())}},t=>{t(t.s=107)}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,